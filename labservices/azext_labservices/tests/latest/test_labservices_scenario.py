# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer
from .preparers import SubnetPreparer
from .example_steps import step_labplan_create
from .example_steps import step_labplan_show
from .example_steps import step_labplan_list
from .example_steps import step_labplan_list2
from .example_steps import step_labplan_update
from .example_steps import step_labplan_save_image
from .example_steps import step_image_create
from .example_steps import step_image_show
from .example_steps import step_image_list
from .example_steps import step_image_update
from .example_steps import step_lab_create
from .example_steps import step_lab_show
from .example_steps import step_lab_list
from .example_steps import step_lab_list2
from .example_steps import step_lab_update
from .example_steps import step_lab_publish
from .example_steps import step_lab_sync_group
from .example_steps import step_schedule_create
from .example_steps import step_schedule_list
from .example_steps import step_schedule_show
from .example_steps import step_schedule_update
from .example_steps import step_schedule_delete
from .example_steps import step_lab_delete
from .example_steps import step_labplan_delete
from .example_steps import step_operationresult_show
from .example_steps import step_sku_list
from .example_steps import step_usage_list
from .example_steps import step_user_create
from .example_steps import step_user_show
from .example_steps import step_user_list
from .example_steps import step_user_update
from .example_steps import step_user_invite
from .example_steps import step_virtualmachine_show
from .example_steps import step_virtualmachine_list
from .example_steps import step_virtualmachine_redeploy
from .example_steps import step_virtualmachine_reimage
from .example_steps import step_virtualmachine_reset_password
from .example_steps import step_virtualmachine_start
from .example_steps import step_virtualmachine_stop
from .example_steps import step_user_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    step_labplan_create(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.disconnectDelay", "00:05", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.idleDelay", "01:00", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.noConnectDelay", "01:00", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownOnDisconnect", "Enabled", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownOnIdle", "UserAbsence", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownWhenNotConnected", "Enabled", case_sensitive=False),
        test.check("defaultConnectionProfile.clientRdpAccess", "Public", case_sensitive=False),
        test.check("defaultConnectionProfile.clientSshAccess", "Public", case_sensitive=False),
        test.check("defaultConnectionProfile.webRdpAccess", "None", case_sensitive=False),
        test.check("defaultConnectionProfile.webSshAccess", "None", case_sensitive=False),
        test.check("defaultNetworkProfile.subnetId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Mi"
                   "crosoft.Network/virtualNetworks/{vn}/subnets/{subnets}", case_sensitive=False),
        test.check("sharedGalleryId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Compute"
                   "/galleries/testsig", case_sensitive=False),
        test.check("supportInfo.email", "help@contoso.com", case_sensitive=False),
        test.check("supportInfo.instructions", "Contact support for help.", case_sensitive=False),
        test.check("supportInfo.phone", "+1-202-555-0123", case_sensitive=False),
        test.check("supportInfo.url", "help.contoso.com", case_sensitive=False),
        test.check("name", "{myLabPlan}", case_sensitive=False),
    ])
    step_labplan_show(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.disconnectDelay", "00:05", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.idleDelay", "01:00", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.noConnectDelay", "01:00", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownOnDisconnect", "Enabled", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownOnIdle", "UserAbsence", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownWhenNotConnected", "Enabled", case_sensitive=False),
        test.check("defaultConnectionProfile.clientRdpAccess", "Public", case_sensitive=False),
        test.check("defaultConnectionProfile.clientSshAccess", "Public", case_sensitive=False),
        test.check("defaultConnectionProfile.webRdpAccess", "None", case_sensitive=False),
        test.check("defaultConnectionProfile.webSshAccess", "None", case_sensitive=False),
        test.check("defaultNetworkProfile.subnetId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Mi"
                   "crosoft.Network/virtualNetworks/{vn}/subnets/{subnets}", case_sensitive=False),
        test.check("sharedGalleryId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Compute"
                   "/galleries/testsig", case_sensitive=False),
        test.check("supportInfo.email", "help@contoso.com", case_sensitive=False),
        test.check("supportInfo.instructions", "Contact support for help.", case_sensitive=False),
        test.check("supportInfo.phone", "+1-202-555-0123", case_sensitive=False),
        test.check("supportInfo.url", "help.contoso.com", case_sensitive=False),
        test.check("name", "{myLabPlan}", case_sensitive=False),
    ])
    step_labplan_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_labplan_list2(test, checks=[
        test.check('length(@)', 1),
    ])
    step_labplan_update(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.disconnectDelay", "00:05", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.idleDelay", "01:00", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.noConnectDelay", "01:00", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownOnDisconnect", "Enabled", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownOnIdle", "UserAbsence", case_sensitive=False),
        test.check("defaultAutoShutdownProfile.shutdownWhenNotConnected", "Enabled", case_sensitive=False),
        test.check("defaultConnectionProfile.clientRdpAccess", "Public", case_sensitive=False),
        test.check("defaultConnectionProfile.clientSshAccess", "Public", case_sensitive=False),
        test.check("defaultConnectionProfile.webRdpAccess", "None", case_sensitive=False),
        test.check("defaultConnectionProfile.webSshAccess", "None", case_sensitive=False),
        test.check("defaultNetworkProfile.subnetId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Mi"
                   "crosoft.Network/virtualNetworks/{vn}/subnets/{subnets}", case_sensitive=False),
        test.check("sharedGalleryId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Compute"
                   "/galleries/testsig", case_sensitive=False),
        test.check("supportInfo.email", "help@contoso.com", case_sensitive=False),
        test.check("supportInfo.instructions", "Contact support for help.", case_sensitive=False),
        test.check("supportInfo.phone", "+1-202-555-0123", case_sensitive=False),
        test.check("supportInfo.url", "help.contoso.com", case_sensitive=False),
        test.check("name", "{myLabPlan}", case_sensitive=False),
    ])
    step_labplan_save_image(test, checks=[])
    step_image_create(test, checks=[
        test.check("enabledState", "Enabled", case_sensitive=False),
        test.check("name", "{myImage}", case_sensitive=False),
    ])
    step_image_show(test, checks=[
        test.check("enabledState", "Enabled", case_sensitive=False),
        test.check("name", "{myImage}", case_sensitive=False),
    ])
    step_image_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_image_update(test, checks=[
        test.check("enabledState", "Enabled", case_sensitive=False),
        test.check("name", "{myImage}", case_sensitive=False),
    ])
    step_lab_create(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("description", "This is a test lab.", case_sensitive=False),
        test.check("autoShutdownProfile.disconnectDelay", "00:05", case_sensitive=False),
        test.check("autoShutdownProfile.idleDelay", "01:00", case_sensitive=False),
        test.check("autoShutdownProfile.noConnectDelay", "01:00", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownOnDisconnect", "Enabled", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownOnIdle", "UserAbsence", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownWhenNotConnected", "Enabled", case_sensitive=False),
        test.check("connectionProfile.clientRdpAccess", "Public", case_sensitive=False),
        test.check("connectionProfile.clientSshAccess", "Public", case_sensitive=False),
        test.check("connectionProfile.webRdpAccess", "None", case_sensitive=False),
        test.check("connectionProfile.webSshAccess", "None", case_sensitive=False),
        test.check("labPlanId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.LabServices/l"
                   "abPlans/{myLabPlan}", case_sensitive=False),
        test.check("networkProfile.subnetId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft"
                   ".Network/virtualNetworks/{vn}/subnets/{subnets}", case_sensitive=False),
        test.check("securityProfile.openAccess", "Disabled", case_sensitive=False),
        test.check("title", "Test Lab", case_sensitive=False),
        test.check("virtualMachineProfile.additionalCapabilities.installGpuDrivers", "Disabled", case_sensitive=False),
        test.check("virtualMachineProfile.adminUser.username", "test-user", case_sensitive=False),
        test.check("virtualMachineProfile.createOption", "TemplateVM", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.offer", "WindowsServer", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.publisher", "Microsoft", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.sku", "2019-Datacenter", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.version", "2019.0.20190410", case_sensitive=False),
        test.check("virtualMachineProfile.usageQuota", "10:00", case_sensitive=False),
        test.check("virtualMachineProfile.useSharedPassword", "Disabled", case_sensitive=False),
    ])
    step_lab_show(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("description", "This is a test lab.", case_sensitive=False),
        test.check("autoShutdownProfile.disconnectDelay", "00:05", case_sensitive=False),
        test.check("autoShutdownProfile.idleDelay", "01:00", case_sensitive=False),
        test.check("autoShutdownProfile.noConnectDelay", "01:00", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownOnDisconnect", "Enabled", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownOnIdle", "UserAbsence", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownWhenNotConnected", "Enabled", case_sensitive=False),
        test.check("connectionProfile.clientRdpAccess", "Public", case_sensitive=False),
        test.check("connectionProfile.clientSshAccess", "Public", case_sensitive=False),
        test.check("connectionProfile.webRdpAccess", "None", case_sensitive=False),
        test.check("connectionProfile.webSshAccess", "None", case_sensitive=False),
        test.check("labPlanId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.LabServices/l"
                   "abPlans/{myLabPlan}", case_sensitive=False),
        test.check("networkProfile.subnetId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft"
                   ".Network/virtualNetworks/{vn}/subnets/{subnets}", case_sensitive=False),
        test.check("securityProfile.openAccess", "Disabled", case_sensitive=False),
        test.check("title", "Test Lab", case_sensitive=False),
        test.check("virtualMachineProfile.additionalCapabilities.installGpuDrivers", "Disabled", case_sensitive=False),
        test.check("virtualMachineProfile.adminUser.username", "test-user", case_sensitive=False),
        test.check("virtualMachineProfile.createOption", "TemplateVM", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.offer", "WindowsServer", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.publisher", "Microsoft", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.sku", "2019-Datacenter", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.version", "2019.0.20190410", case_sensitive=False),
        test.check("virtualMachineProfile.usageQuota", "10:00", case_sensitive=False),
        test.check("virtualMachineProfile.useSharedPassword", "Disabled", case_sensitive=False),
    ])
    step_lab_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_lab_list2(test, checks=[
        test.check('length(@)', 1),
    ])
    step_lab_update(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("description", "This is a test lab.", case_sensitive=False),
        test.check("autoShutdownProfile.disconnectDelay", "00:05", case_sensitive=False),
        test.check("autoShutdownProfile.idleDelay", "01:00", case_sensitive=False),
        test.check("autoShutdownProfile.noConnectDelay", "01:00", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownOnDisconnect", "Enabled", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownOnIdle", "UserAbsence", case_sensitive=False),
        test.check("autoShutdownProfile.shutdownWhenNotConnected", "Enabled", case_sensitive=False),
        test.check("connectionProfile.clientRdpAccess", "Public", case_sensitive=False),
        test.check("connectionProfile.clientSshAccess", "Public", case_sensitive=False),
        test.check("connectionProfile.webRdpAccess", "None", case_sensitive=False),
        test.check("connectionProfile.webSshAccess", "None", case_sensitive=False),
        test.check("labPlanId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.LabServices/l"
                   "abPlans/{myLabPlan}", case_sensitive=False),
        test.check("securityProfile.openAccess", "Enabled", case_sensitive=False),
        test.check("title", "Test Lab", case_sensitive=False),
        test.check("virtualMachineProfile.additionalCapabilities.installGpuDrivers", "Disabled", case_sensitive=False),
        test.check("virtualMachineProfile.adminUser.username", "test-user", case_sensitive=False),
        test.check("virtualMachineProfile.createOption", "TemplateVM", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.offer", "WindowsServer", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.publisher", "Microsoft", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.sku", "2019-Datacenter", case_sensitive=False),
        test.check("virtualMachineProfile.imageReference.version", "2019.0.20190410", case_sensitive=False),
        test.check("virtualMachineProfile.usageQuota", "10:00", case_sensitive=False),
        test.check("virtualMachineProfile.useSharedPassword", "Disabled", case_sensitive=False),
    ])
    step_lab_publish(test, checks=[])
    step_lab_sync_group(test, checks=[])
    step_schedule_create(test, checks=[
        test.check("notes", "Schedule 1 for students", case_sensitive=False),
        test.check("recurrencePattern.expirationDate", "2020-08-14", case_sensitive=False),
        test.check("recurrencePattern.frequency", "Daily", case_sensitive=False),
        test.check("recurrencePattern.interval", 2),
        test.check("startAt", "2020-05-26T12:00:00Z", case_sensitive=False),
        test.check("stopAt", "2020-05-26T18:00:00Z", case_sensitive=False),
        test.check("timeZoneId", "America/Los_Angeles", case_sensitive=False),
        test.check("name", "{mySchedule}", case_sensitive=False),
    ])
    step_schedule_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_schedule_show(test, checks=[
        test.check("notes", "Schedule 1 for students", case_sensitive=False),
        test.check("startAt", "2020-05-26T12:00:00Z", case_sensitive=False),
        test.check("stopAt", "2020-05-26T18:00:00Z", case_sensitive=False),
        test.check("timeZoneId", "America/Los_Angeles", case_sensitive=False),
        test.check("name", "{mySchedule}", case_sensitive=False),
    ])
    step_schedule_update(test, checks=[
        test.check("notes", "Schedule 1 for students", case_sensitive=False),
        test.check("recurrencePattern.expirationDate", "2020-08-14", case_sensitive=False),
        test.check("recurrencePattern.frequency", "Daily", case_sensitive=False),
        test.check("recurrencePattern.interval", 2),
        test.check("startAt", "2020-05-26T12:00:00Z", case_sensitive=False),
        test.check("stopAt", "2020-05-26T18:00:00Z", case_sensitive=False),
        test.check("timeZoneId", "America/Los_Angeles", case_sensitive=False),
        test.check("name", "{mySchedule}", case_sensitive=False),
    ])
    step_schedule_delete(test, checks=[])
    step_lab_delete(test, checks=[])
    step_labplan_delete(test, checks=[])
    step_operationresult_show(test, checks=[])
    step_sku_list(test, checks=[])
    step_usage_list(test, checks=[])
    step_user_create(test, checks=[
        test.check("additionalUsageQuota", "20:00", case_sensitive=False),
        test.check("email", "testuser@contoso.com", case_sensitive=False),
    ])
    step_user_show(test, checks=[
        test.check("email", "testuser@contoso.com", case_sensitive=False),
    ])
    step_user_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_user_update(test, checks=[
        test.check("additionalUsageQuota", "20:00", case_sensitive=False),
        test.check("email", "testuser@contoso.com", case_sensitive=False),
    ])
    step_user_invite(test, checks=[])
    step_virtualmachine_show(test, checks=[])
    step_virtualmachine_list(test, checks=[])
    step_virtualmachine_redeploy(test, checks=[])
    step_virtualmachine_reimage(test, checks=[])
    step_virtualmachine_reset_password(test, checks=[])
    step_virtualmachine_start(test, checks=[])
    step_virtualmachine_stop(test, checks=[])
    step_user_delete(test, checks=[])
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class LabservicesScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(LabservicesScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myLab2': 'default',
            'myUser3': 'default',
            'myVirtualMachine2': 'default',
            'myLabPlan2': 'default',
            'myImage': 'image1',
            'myLabPlan': 'testlabplan',
            'myLab': 'testlab',
            'mySchedule': 'schedule1',
            'myUser': 'testuser',
            'myUser2': 'example-username',
            'myVirtualMachine': 'template',
        })

    @ResourceGroupPreparer(name_prefix='clitestlabservices_testrg123'[:7], key='rg', parameter_name='rg')
    @VirtualNetworkPreparer(name_prefix='clitestlabservices_test-vnet'[:7], key='vn', resource_group_key='rg')
    @SubnetPreparer(name_prefix='clitestlabservices_default'[:7], key='subnets', virtual_network_key='vn',
                    resource_group_key='rg')
    def test_labservices_Scenario(self, rg):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
