# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_labservices.action import (
    AddDefaultConnectionProfile,
    AddDefaultAutoShutdownProfile,
    AddSupportInfo,
    AddRosterProfile,
    AddNetworkProfile,
    AddImageReference,
    AddSku,
    AddAdditionalCapabilities,
    AddAdminUser,
    AddRecurrencePattern
)


def load_arguments(self, _):

    with self.argument_context('labservices image list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', type=str, help='The name of the lab plan that uniquely identifies it within '
                   'containing resource group. Used in resource URIs and in UI.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply to the operation.')

    with self.argument_context('labservices image show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', type=str, help='The name of the lab plan that uniquely identifies it within '
                   'containing resource group. Used in resource URIs and in UI.', id_part='name')
        c.argument('image_name', options_list=['--name', '-n', '--image-name'], type=str, help='The image name.',
                   id_part='child_name_1')

    with self.argument_context('labservices image create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', type=str, help='The name of the lab plan that uniquely identifies it within '
                   'containing resource group. Used in resource URIs and in UI.')
        c.argument('image_name', options_list=['--name', '-n', '--image-name'], type=str, help='The image name.')
        c.argument('enabled_state', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Is the image enabled')
        c.argument('available_regions', nargs='+', help='The available regions of the image in the shared gallery.')

    with self.argument_context('labservices image update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', type=str, help='The name of the lab plan that uniquely identifies it within '
                   'containing resource group. Used in resource URIs and in UI.', id_part='name')
        c.argument('image_name', options_list=['--name', '-n', '--image-name'], type=str, help='The image name.',
                   id_part='child_name_1')
        c.argument('enabled_state', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Is the image enabled')

    with self.argument_context('labservices labplan list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply to the operation.')

    with self.argument_context('labservices labplan show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', options_list=['--name', '-n', '--lab-plan-name'], type=str, help='The name of the '
                   'lab plan that uniquely identifies it within containing resource group. Used in resource URIs and '
                   'in UI.', id_part='name')

    with self.argument_context('labservices labplan create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', options_list=['--name', '-n', '--lab-plan-name'], type=str, help='The name of the '
                   'lab plan that uniquely identifies it within containing resource group. Used in resource URIs and '
                   'in UI.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('default_connection_profile', action=AddDefaultConnectionProfile, nargs='+', help='The default lab '
                   'connection profile. This can be changed on a lab resource and only provides a default profile.')
        c.argument('default_auto_shutdown_profile', action=AddDefaultAutoShutdownProfile, nargs='+', help='The default '
                   'lab shutdown profile. This can be changed on a lab resource and only provides a default profile.')
        c.argument('allowed_regions', nargs='+', help='The allowed regions for the lab creator to use when creating '
                   'labs using this lab plan.')
        c.argument('shared_gallery_id', type=str, help='Resource ID of the Shared Image Gallery attached to this lab '
                   'plan. When saving a lab template virtual machine image it will be persisted in this gallery. '
                   'Shared images from the gallery can be made available to use when creating new labs.')
        c.argument('support_info', action=AddSupportInfo, nargs='+', help='Support contact information and '
                   'instructions for users of the lab plan. This information is displayed to lab owners and virtual '
                   'machine users for all labs in the lab plan.')
        c.argument('linked_lms_instance', type=str, help='Base Url of the lms instance this lab plan can link lab '
                   'rosters against.')
        c.argument('subnet_id', type=str, help='The external subnet resource id', arg_group='Default Network Profile')

    with self.argument_context('labservices labplan update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', options_list=['--name', '-n', '--lab-plan-name'], type=str, help='The name of the '
                   'lab plan that uniquely identifies it within containing resource group. Used in resource URIs and '
                   'in UI.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('default_connection_profile', action=AddDefaultConnectionProfile, nargs='+', help='The default lab '
                   'connection profile. This can be changed on a lab resource and only provides a default profile.')
        c.argument('default_auto_shutdown_profile', action=AddDefaultAutoShutdownProfile, nargs='+', help='The default '
                   'lab shutdown profile. This can be changed on a lab resource and only provides a default profile.')
        c.argument('allowed_regions', nargs='+', help='The allowed regions for the lab creator to use when creating '
                   'labs using this lab plan.')
        c.argument('shared_gallery_id', type=str, help='Resource ID of the Shared Image Gallery attached to this lab '
                   'plan. When saving a lab template virtual machine image it will be persisted in this gallery. '
                   'Shared images from the gallery can be made available to use when creating new labs.')
        c.argument('support_info', action=AddSupportInfo, nargs='+', help='Support contact information and '
                   'instructions for users of the lab plan. This information is displayed to lab owners and virtual '
                   'machine users for all labs in the lab plan.')
        c.argument('linked_lms_instance', type=str, help='Base Url of the lms instance this lab plan can link lab '
                   'rosters against.')
        c.argument('subnet_id', type=str, help='The external subnet resource id', arg_group='Default Network Profile')

    with self.argument_context('labservices labplan delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', options_list=['--name', '-n', '--lab-plan-name'], type=str, help='The name of the '
                   'lab plan that uniquely identifies it within containing resource group. Used in resource URIs and '
                   'in UI.', id_part='name')

    with self.argument_context('labservices labplan save-image') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', type=str, help='The name of the lab plan that uniquely identifies it within '
                   'containing resource group. Used in resource URIs and in UI.', id_part='name')
        c.argument('name', type=str, help='The name for the image we create.')
        c.argument('lab_virtual_machine_id', type=str, help='The ID of the lab virtual machine you want to save an '
                   'image from.')

    with self.argument_context('labservices labplan wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_plan_name', options_list=['--name', '-n', '--lab-plan-name'], type=str, help='The name of the '
                   'lab plan that uniquely identifies it within containing resource group. Used in resource URIs and '
                   'in UI.', id_part='name')

    with self.argument_context('labservices lab list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply to the operation.')

    with self.argument_context('labservices lab show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', options_list=['--name', '-n', '--lab-name'], type=str, help='The name of the lab that '
                   'uniquely identifies it within containing lab account. Used in resource URIs.', id_part='name')

    with self.argument_context('labservices lab create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', options_list=['--name', '-n', '--lab-name'], type=str, help='The name of the lab that '
                   'uniquely identifies it within containing lab account. Used in resource URIs.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('auto_shutdown_profile', action=AddDefaultAutoShutdownProfile, nargs='+', help='The resource auto '
                   'shutdown configuration for the lab. This controls whether actions are taken on resources that are '
                   'sitting idle.')
        c.argument('connection_profile', action=AddDefaultConnectionProfile, nargs='+', help='The connection profile '
                   'for the lab. This controls settings such as web access to lab resources or whether RDP or SSH '
                   'ports are open.')
        c.argument('roster_profile', action=AddRosterProfile, nargs='+', help='The lab user list management profile.')
        c.argument('lab_plan_id', type=str, help='The ID of the lab plan. Used during resource creation to provide '
                   'defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a '
                   'labPlanId on an existing lab provides organization..')
        c.argument('title', type=str, help='The title of the lab.')
        c.argument('description', type=str, help='The description of the lab.')
        c.argument('network_profile', action=AddNetworkProfile, nargs='+', help='The network profile for the lab, '
                   'typically applied via a lab plan. This profile cannot be modified once a lab has been created.')
        c.argument('open_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether any user or only '
                   'specified users can register to a lab.', arg_group='Security Profile')
        c.argument('create_option', arg_type=get_enum_type(['Image', 'TemplateVM']), help='Indicates what lab virtual '
                   'machines are created from.', arg_group='Virtual Machine Profile')
        c.argument('image_reference', action=AddImageReference, nargs='+', help='The image configuration for lab '
                   'virtual machines.', arg_group='Virtual Machine Profile')
        c.argument('sku', action=AddSku, nargs='+', help='The SKU for the lab. Defines the type of virtual machines '
                   'used in the lab.', arg_group='Virtual Machine Profile')
        c.argument('additional_capabilities', action=AddAdditionalCapabilities, nargs='+', help='Additional VM '
                   'capabilities.', arg_group='Virtual Machine Profile')
        c.argument('usage_quota', help='The initial quota alloted to each lab user. Must be a time span between 0 and '
                   '9999 hours.', arg_group='Virtual Machine Profile')
        c.argument('use_shared_password', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Enabling this option '
                   'will use the same password for all user VMs.', arg_group='Virtual Machine Profile')
        c.argument('admin_user', action=AddAdminUser, nargs='+', help='Credentials for the admin user on the VM.',
                   arg_group='Virtual Machine Profile')
        c.argument('non_admin_user', action=AddAdminUser, nargs='+', help='Credentials for the non-admin user on the '
                   'VM, if one exists.', arg_group='Virtual Machine Profile')

    with self.argument_context('labservices lab update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', options_list=['--name', '-n', '--lab-name'], type=str, help='The name of the lab that '
                   'uniquely identifies it within containing lab account. Used in resource URIs.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('auto_shutdown_profile', action=AddDefaultAutoShutdownProfile, nargs='+', help='The resource auto '
                   'shutdown configuration for the lab. This controls whether actions are taken on resources that are '
                   'sitting idle.')
        c.argument('connection_profile', action=AddDefaultConnectionProfile, nargs='+', help='The connection profile '
                   'for the lab. This controls settings such as web access to lab resources or whether RDP or SSH '
                   'ports are open.')
        c.argument('roster_profile', action=AddRosterProfile, nargs='+', help='The lab user list management profile.')
        c.argument('lab_plan_id', type=str, help='The ID of the lab plan. Used during resource creation to provide '
                   'defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a '
                   'labPlanId on an existing lab provides organization..')
        c.argument('title', type=str, help='The title of the lab.')
        c.argument('description', type=str, help='The description of the lab.')
        c.argument('open_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether any user or only '
                   'specified users can register to a lab.', arg_group='Security Profile')
        c.argument('create_option', arg_type=get_enum_type(['Image', 'TemplateVM']), help='Indicates what lab virtual '
                   'machines are created from.', arg_group='Virtual Machine Profile')
        c.argument('image_reference', action=AddImageReference, nargs='+', help='The image configuration for lab '
                   'virtual machines.', arg_group='Virtual Machine Profile')
        c.argument('sku', action=AddSku, nargs='+', help='The SKU for the lab. Defines the type of virtual machines '
                   'used in the lab.', arg_group='Virtual Machine Profile')
        c.argument('additional_capabilities', action=AddAdditionalCapabilities, nargs='+', help='Additional VM '
                   'capabilities.', arg_group='Virtual Machine Profile')
        c.argument('usage_quota', help='The initial quota alloted to each lab user. Must be a time span between 0 and '
                   '9999 hours.', arg_group='Virtual Machine Profile')
        c.argument('use_shared_password', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Enabling this option '
                   'will use the same password for all user VMs.', arg_group='Virtual Machine Profile')
        c.argument('admin_user', action=AddAdminUser, nargs='+', help='Credentials for the admin user on the VM.',
                   arg_group='Virtual Machine Profile')
        c.argument('non_admin_user', action=AddAdminUser, nargs='+', help='Credentials for the non-admin user on the '
                   'VM, if one exists.', arg_group='Virtual Machine Profile')

    with self.argument_context('labservices lab delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', options_list=['--name', '-n', '--lab-name'], type=str, help='The name of the lab that '
                   'uniquely identifies it within containing lab account. Used in resource URIs.', id_part='name')

    with self.argument_context('labservices lab publish') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', options_list=['--name', '-n', '--lab-name'], type=str, help='The name of the lab that '
                   'uniquely identifies it within containing lab account. Used in resource URIs.', id_part='name')

    with self.argument_context('labservices lab sync-group') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', options_list=['--name', '-n', '--lab-name'], type=str, help='The name of the lab that '
                   'uniquely identifies it within containing lab account. Used in resource URIs.', id_part='name')

    with self.argument_context('labservices lab wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', options_list=['--name', '-n', '--lab-name'], type=str, help='The name of the lab that '
                   'uniquely identifies it within containing lab account. Used in resource URIs.', id_part='name')

    with self.argument_context('labservices operationresult show') as c:
        c.argument('operation_result_id', type=str, help='The operation result ID / name.', id_part='name')

    with self.argument_context('labservices schedule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply to the operation.')

    with self.argument_context('labservices schedule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('schedule_name', options_list=['--name', '-n', '--schedule-name'], type=str, help='The name of the '
                   'schedule that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')

    with self.argument_context('labservices schedule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.')
        c.argument('schedule_name', options_list=['--name', '-n', '--schedule-name'], type=str, help='The name of the '
                   'schedule that uniquely identifies it within containing lab. Used in resource URIs.')
        c.argument('start_at', help='When lab user virtual machines will be started. Timestamp offsets will be ignored '
                   'and timeZoneId is used instead.')
        c.argument('stop_at', help='When lab user virtual machines will be stopped. Timestamp offsets will be ignored '
                   'and timeZoneId is used instead.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='+', help='The recurrence pattern of the '
                   'scheduled actions.')
        c.argument('time_zone_id', type=str, help='The IANA timezone id for the schedule.')
        c.argument('notes', type=str, help='Notes for this schedule.')

    with self.argument_context('labservices schedule update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('schedule_name', options_list=['--name', '-n', '--schedule-name'], type=str, help='The name of the '
                   'schedule that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')
        c.argument('start_at', help='When lab user virtual machines will be started. Timestamp offsets will be ignored '
                   'and timeZoneId is used instead.')
        c.argument('stop_at', help='When lab user virtual machines will be stopped. Timestamp offsets will be ignored '
                   'and timeZoneId is used instead.')
        c.argument('recurrence_pattern', action=AddRecurrencePattern, nargs='+', help='The recurrence pattern of the '
                   'scheduled actions.')
        c.argument('time_zone_id', type=str, help='The IANA timezone id for the schedule.')
        c.argument('notes', type=str, help='Notes for this schedule.')

    with self.argument_context('labservices schedule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('schedule_name', options_list=['--name', '-n', '--schedule-name'], type=str, help='The name of the '
                   'schedule that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')

    with self.argument_context('labservices schedule wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('schedule_name', options_list=['--name', '-n', '--schedule-name'], type=str, help='The name of the '
                   'schedule that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')

    with self.argument_context('labservices user list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply to the operation.')

    with self.argument_context('labservices user show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('user_name', options_list=['--name', '-n', '--user-name'], type=str, help='The name of the user '
                   'that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')

    with self.argument_context('labservices user create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.')
        c.argument('user_name', options_list=['--name', '-n', '--user-name'], type=str, help='The name of the user '
                   'that uniquely identifies it within containing lab. Used in resource URIs.')
        c.argument('additional_usage_quota', help='The amount of usage quota time the user gets in addition to the lab '
                   'usage quota.')
        c.argument('email', type=str, help='Email address of the user.')

    with self.argument_context('labservices user update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('user_name', options_list=['--name', '-n', '--user-name'], type=str, help='The name of the user '
                   'that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')
        c.argument('additional_usage_quota', help='The amount of usage quota time the user gets in addition to the lab '
                   'usage quota.')

    with self.argument_context('labservices user delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('user_name', options_list=['--name', '-n', '--user-name'], type=str, help='The name of the user '
                   'that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')

    with self.argument_context('labservices user invite') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('user_name', options_list=['--name', '-n', '--user-name'], type=str, help='The name of the user '
                   'that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')
        c.argument('text', type=str, help='Custom text for the invite email.')

    with self.argument_context('labservices user wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('user_name', options_list=['--name', '-n', '--user-name'], type=str, help='The name of the user '
                   'that uniquely identifies it within containing lab. Used in resource URIs.',
                   id_part='child_name_1')

    with self.argument_context('labservices virtualmachine list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply to the operation.')

    with self.argument_context('labservices virtualmachine show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('virtual_machine_name', options_list=['--name', '-n', '--virtual-machine-name'], type=str,
                   help='The ID of the virtual machine that uniquely identifies it within the containing lab. Used in '
                   'resource URIs.', id_part='child_name_1')

    with self.argument_context('labservices virtualmachine redeploy') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('virtual_machine_name', options_list=['--name', '-n', '--virtual-machine-name'], type=str,
                   help='The ID of the virtual machine that uniquely identifies it within the containing lab. Used in '
                   'resource URIs.', id_part='child_name_1')

    with self.argument_context('labservices virtualmachine reimage') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('virtual_machine_name', options_list=['--name', '-n', '--virtual-machine-name'], type=str,
                   help='The ID of the virtual machine that uniquely identifies it within the containing lab. Used in '
                   'resource URIs.', id_part='child_name_1')

    with self.argument_context('labservices virtualmachine reset-password') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('virtual_machine_name', options_list=['--name', '-n', '--virtual-machine-name'], type=str,
                   help='The ID of the virtual machine that uniquely identifies it within the containing lab. Used in '
                   'resource URIs.', id_part='child_name_1')
        c.argument('username', type=str, help='The user whose password is being reset')
        c.argument('password', type=str, help='The password')

    with self.argument_context('labservices virtualmachine start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('virtual_machine_name', options_list=['--name', '-n', '--virtual-machine-name'], type=str,
                   help='The ID of the virtual machine that uniquely identifies it within the containing lab. Used in '
                   'resource URIs.', id_part='child_name_1')

    with self.argument_context('labservices virtualmachine stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('virtual_machine_name', options_list=['--name', '-n', '--virtual-machine-name'], type=str,
                   help='The ID of the virtual machine that uniquely identifies it within the containing lab. Used in '
                   'resource URIs.', id_part='child_name_1')

    with self.argument_context('labservices virtualmachine wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('lab_name', type=str, help='The name of the lab that uniquely identifies it within containing lab '
                   'account. Used in resource URIs.', id_part='name')
        c.argument('virtual_machine_name', options_list=['--name', '-n', '--virtual-machine-name'], type=str,
                   help='The ID of the virtual machine that uniquely identifies it within the containing lab. Used in '
                   'resource URIs.', id_part='child_name_1')

    with self.argument_context('labservices usage list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply to the operation.')

    with self.argument_context('labservices sku list') as c:
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply to the operation.')
