# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def labservices_image_list(client, resource_group_name, lab_plan_name, filter_=None):
    return client.list_by_lab_plan(resource_group_name=resource_group_name,
                                   lab_plan_name=lab_plan_name, filter=filter_)


def labservices_image_show(client, resource_group_name, lab_plan_name, image_name):
    return client.get(resource_group_name=resource_group_name, lab_plan_name=lab_plan_name, image_name=image_name)


def labservices_image_create(client, resource_group_name, lab_plan_name, image_name, enabled_state=None,
                             available_regions=None):
    body = {}
    if enabled_state is not None:
        body['enabled_state'] = enabled_state
    if available_regions is not None:
        body['available_regions'] = available_regions
    return client.create_or_update(resource_group_name=resource_group_name, lab_plan_name=lab_plan_name,
                                   image_name=image_name, body=body)


def labservices_image_update(client, resource_group_name, lab_plan_name, image_name, enabled_state=None):
    body = {}
    if enabled_state is not None:
        body['enabled_state'] = enabled_state
    return client.update(resource_group_name=resource_group_name, lab_plan_name=lab_plan_name, image_name=image_name,
                         body=body)


def labservices_labplan_list(client, resource_group_name=None, filter_=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription(filter=filter_)


def labservices_labplan_show(client, resource_group_name, lab_plan_name):
    return client.get(resource_group_name=resource_group_name, lab_plan_name=lab_plan_name)


def labservices_labplan_create(client, resource_group_name, lab_plan_name, location, tags=None,
                               default_connection_profile=None, default_auto_shutdown_profile=None,
                               allowed_regions=None, shared_gallery_id=None, support_info=None,
                               linked_lms_instance=None, subnet_id=None, no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if default_connection_profile is not None:
        body['default_connection_profile'] = default_connection_profile
    if default_auto_shutdown_profile is not None:
        body['default_auto_shutdown_profile'] = default_auto_shutdown_profile
    if allowed_regions is not None:
        body['allowed_regions'] = allowed_regions
    if shared_gallery_id is not None:
        body['shared_gallery_id'] = shared_gallery_id
    if support_info is not None:
        body['support_info'] = support_info
    if linked_lms_instance is not None:
        body['linked_lms_instance'] = linked_lms_instance
    body['default_network_profile'] = {}
    if subnet_id is not None:
        body['default_network_profile']['subnet_id'] = subnet_id
    if len(body['default_network_profile']) == 0:
        del body['default_network_profile']
    return sdk_no_wait(no_wait, client.begin_create_or_update, resource_group_name=resource_group_name,
                       lab_plan_name=lab_plan_name, body=body)


def labservices_labplan_update(client, resource_group_name, lab_plan_name, tags=None, default_connection_profile=None,
                               default_auto_shutdown_profile=None, allowed_regions=None, shared_gallery_id=None,
                               support_info=None, linked_lms_instance=None, subnet_id=None, no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if default_connection_profile is not None:
        body['default_connection_profile'] = default_connection_profile
    if default_auto_shutdown_profile is not None:
        body['default_auto_shutdown_profile'] = default_auto_shutdown_profile
    if allowed_regions is not None:
        body['allowed_regions'] = allowed_regions
    if shared_gallery_id is not None:
        body['shared_gallery_id'] = shared_gallery_id
    if support_info is not None:
        body['support_info'] = support_info
    if linked_lms_instance is not None:
        body['linked_lms_instance'] = linked_lms_instance
    body['default_network_profile'] = {}
    if subnet_id is not None:
        body['default_network_profile']['subnet_id'] = subnet_id
    if len(body['default_network_profile']) == 0:
        del body['default_network_profile']
    return sdk_no_wait(no_wait, client.begin_update, resource_group_name=resource_group_name,
                       lab_plan_name=lab_plan_name, body=body)


def labservices_labplan_delete(client, resource_group_name, lab_plan_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_delete, resource_group_name=resource_group_name,
                       lab_plan_name=lab_plan_name)


def labservices_labplan_save_image(client, resource_group_name, lab_plan_name, name=None,
                                   lab_virtual_machine_id=None, no_wait=False):
    body = {}
    if name is not None:
        body['name'] = name
    if lab_virtual_machine_id is not None:
        body['lab_virtual_machine_id'] = lab_virtual_machine_id
    return sdk_no_wait(no_wait, client.begin_save_image, resource_group_name=resource_group_name,
                       lab_plan_name=lab_plan_name, body=body)


def labservices_lab_list(client, resource_group_name=None, filter_=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription(filter=filter_)


def labservices_lab_show(client, resource_group_name, lab_name):
    return client.get(resource_group_name=resource_group_name, lab_name=lab_name)


def labservices_lab_create(client, resource_group_name, lab_name, location, tags=None, auto_shutdown_profile=None,
                           connection_profile=None, roster_profile=None, lab_plan_id=None, title=None, description=None,
                           network_profile=None, open_access=None, create_option=None, image_reference=None, sku=None,
                           additional_capabilities=None, usage_quota=None, use_shared_password=None, admin_user=None,
                           non_admin_user=None, no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if auto_shutdown_profile is not None:
        body['auto_shutdown_profile'] = auto_shutdown_profile
    if connection_profile is not None:
        body['connection_profile'] = connection_profile
    if roster_profile is not None:
        body['roster_profile'] = roster_profile
    if lab_plan_id is not None:
        body['lab_plan_id'] = lab_plan_id
    if title is not None:
        body['title'] = title
    if description is not None:
        body['description'] = description
    if network_profile is not None:
        body['network_profile'] = network_profile
    body['security_profile'] = {}
    if open_access is not None:
        body['security_profile']['open_access'] = open_access
    if len(body['security_profile']) == 0:
        del body['security_profile']
    body['virtual_machine_profile'] = {}
    if create_option is not None:
        body['virtual_machine_profile']['create_option'] = create_option
    if image_reference is not None:
        body['virtual_machine_profile']['image_reference'] = image_reference
    if sku is not None:
        body['virtual_machine_profile']['sku'] = sku
    if additional_capabilities is not None:
        body['virtual_machine_profile']['additional_capabilities'] = additional_capabilities
    if usage_quota is not None:
        body['virtual_machine_profile']['usage_quota'] = usage_quota
    if use_shared_password is not None:
        body['virtual_machine_profile']['use_shared_password'] = use_shared_password
    if admin_user is not None:
        body['virtual_machine_profile']['admin_user'] = admin_user
    if non_admin_user is not None:
        body['virtual_machine_profile']['non_admin_user'] = non_admin_user
    if len(body['virtual_machine_profile']) == 0:
        del body['virtual_machine_profile']
    return sdk_no_wait(no_wait, client.begin_create_or_update, resource_group_name=resource_group_name,
                       lab_name=lab_name, body=body)


def labservices_lab_update(client, resource_group_name, lab_name, tags=None, auto_shutdown_profile=None,
                           connection_profile=None, roster_profile=None, lab_plan_id=None, title=None,
                           description=None, open_access=None, create_option=None, image_reference=None, sku=None,
                           additional_capabilities=None, usage_quota=None, use_shared_password=None, admin_user=None,
                           non_admin_user=None, no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if auto_shutdown_profile is not None:
        body['auto_shutdown_profile'] = auto_shutdown_profile
    if connection_profile is not None:
        body['connection_profile'] = connection_profile
    if roster_profile is not None:
        body['roster_profile'] = roster_profile
    if lab_plan_id is not None:
        body['lab_plan_id'] = lab_plan_id
    if title is not None:
        body['title'] = title
    if description is not None:
        body['description'] = description
    body['security_profile'] = {}
    if open_access is not None:
        body['security_profile']['open_access'] = open_access
    if len(body['security_profile']) == 0:
        del body['security_profile']
    body['virtual_machine_profile'] = {}
    if create_option is not None:
        body['virtual_machine_profile']['create_option'] = create_option
    if image_reference is not None:
        body['virtual_machine_profile']['image_reference'] = image_reference
    if sku is not None:
        body['virtual_machine_profile']['sku'] = sku
    if additional_capabilities is not None:
        body['virtual_machine_profile']['additional_capabilities'] = additional_capabilities
    if usage_quota is not None:
        body['virtual_machine_profile']['usage_quota'] = usage_quota
    if use_shared_password is not None:
        body['virtual_machine_profile']['use_shared_password'] = use_shared_password
    if admin_user is not None:
        body['virtual_machine_profile']['admin_user'] = admin_user
    if non_admin_user is not None:
        body['virtual_machine_profile']['non_admin_user'] = non_admin_user
    if len(body['virtual_machine_profile']) == 0:
        del body['virtual_machine_profile']
    return sdk_no_wait(no_wait, client.begin_update, resource_group_name=resource_group_name,
                       lab_name=lab_name, body=body)


def labservices_lab_delete(client, resource_group_name, lab_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_delete, resource_group_name=resource_group_name, lab_name=lab_name)


def labservices_lab_publish(client, resource_group_name, lab_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_publish, resource_group_name=resource_group_name, lab_name=lab_name)


def labservices_lab_sync_group(client, resource_group_name, lab_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_sync_group, resource_group_name=resource_group_name, lab_name=lab_name)


def labservices_operationresult_show(client, operation_result_id):
    return client.get(operation_result_id=operation_result_id)


def labservices_schedule_list(client, resource_group_name, lab_name, filter_=None):
    return client.list_by_lab(resource_group_name=resource_group_name, lab_name=lab_name, filter=filter_)


def labservices_schedule_show(client, resource_group_name, lab_name, schedule_name):
    return client.get(resource_group_name=resource_group_name, lab_name=lab_name, schedule_name=schedule_name)


def labservices_schedule_create(client, resource_group_name, lab_name, schedule_name, start_at=None, stop_at=None,
                                recurrence_pattern=None, time_zone_id=None, notes=None):
    body = {}
    if start_at is not None:
        body['start_at'] = start_at
    if stop_at is not None:
        body['stop_at'] = stop_at
    if recurrence_pattern is not None:
        body['recurrence_pattern'] = recurrence_pattern
    if time_zone_id is not None:
        body['time_zone_id'] = time_zone_id
    if notes is not None:
        body['notes'] = notes
    return client.create_or_update(resource_group_name=resource_group_name, lab_name=lab_name,
                                   schedule_name=schedule_name, body=body)


def labservices_schedule_update(client, resource_group_name, lab_name, schedule_name, start_at=None, stop_at=None,
                                recurrence_pattern=None, time_zone_id=None, notes=None):
    body = {}
    if start_at is not None:
        body['start_at'] = start_at
    if stop_at is not None:
        body['stop_at'] = stop_at
    if recurrence_pattern is not None:
        body['recurrence_pattern'] = recurrence_pattern
    if time_zone_id is not None:
        body['time_zone_id'] = time_zone_id
    if notes is not None:
        body['notes'] = notes
    return client.update(resource_group_name=resource_group_name, lab_name=lab_name,
                         schedule_name=schedule_name, body=body)


def labservices_schedule_delete(client, resource_group_name, lab_name, schedule_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_delete, resource_group_name=resource_group_name,
                       lab_name=lab_name, schedule_name=schedule_name)


def labservices_user_list(client, resource_group_name, lab_name, filter_=None):
    return client.list_by_lab(resource_group_name=resource_group_name, lab_name=lab_name, filter=filter_)


def labservices_user_show(client, resource_group_name, lab_name, user_name):
    return client.get(resource_group_name=resource_group_name, lab_name=lab_name, user_name=user_name)


def labservices_user_create(client, resource_group_name, lab_name, user_name, email,
                            additional_usage_quota=None, no_wait=False):
    body = {}
    if additional_usage_quota is not None:
        body['additional_usage_quota'] = additional_usage_quota
    body['email'] = email
    return sdk_no_wait(no_wait, client.begin_create_or_update, resource_group_name=resource_group_name,
                       lab_name=lab_name, user_name=user_name, body=body)


def labservices_user_update(client, resource_group_name, lab_name, user_name,
                            additional_usage_quota=None, no_wait=False):
    body = {}
    if additional_usage_quota is not None:
        body['additional_usage_quota'] = additional_usage_quota
    return sdk_no_wait(no_wait, client.begin_update, resource_group_name=resource_group_name,
                       lab_name=lab_name, user_name=user_name, body=body)


def labservices_user_delete(client, resource_group_name, lab_name, user_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_delete, resource_group_name=resource_group_name,
                       lab_name=lab_name, user_name=user_name)


def labservices_user_invite(client, resource_group_name, lab_name, user_name, text=None, no_wait=False):
    body = {}
    if text is not None:
        body['text'] = text
    return sdk_no_wait(no_wait, client.begin_invite, resource_group_name=resource_group_name,
                       lab_name=lab_name, user_name=user_name, body=body)


def labservices_virtualmachine_list(client, resource_group_name, lab_name, filter_=None):
    return client.list_by_lab(resource_group_name=resource_group_name, lab_name=lab_name, filter=filter_)


def labservices_virtualmachine_show(client, resource_group_name, lab_name, virtual_machine_name):
    return client.get(resource_group_name=resource_group_name, lab_name=lab_name,
                      virtual_machine_name=virtual_machine_name)


def labservices_virtualmachine_redeploy(client, resource_group_name, lab_name, virtual_machine_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_redeploy, resource_group_name=resource_group_name,
                       lab_name=lab_name, virtual_machine_name=virtual_machine_name)


def labservices_virtualmachine_reimage(client, resource_group_name, lab_name, virtual_machine_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_reimage, resource_group_name=resource_group_name,
                       lab_name=lab_name, virtual_machine_name=virtual_machine_name)


def labservices_virtualmachine_reset_password(client, resource_group_name, lab_name, virtual_machine_name,
                                              username, password, no_wait=False):
    body = {}
    body['username'] = username
    body['password'] = password
    return sdk_no_wait(no_wait, client.begin_reset_password, resource_group_name=resource_group_name,
                       lab_name=lab_name, virtual_machine_name=virtual_machine_name, body=body)


def labservices_virtualmachine_start(client, resource_group_name, lab_name, virtual_machine_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_start, resource_group_name=resource_group_name,
                       lab_name=lab_name, virtual_machine_name=virtual_machine_name)


def labservices_virtualmachine_stop(client, resource_group_name, lab_name, virtual_machine_name, no_wait=False):
    return sdk_no_wait(no_wait, client.begin_stop, resource_group_name=resource_group_name,
                       lab_name=lab_name, virtual_machine_name=virtual_machine_name)


def labservices_usage_list(client, location, filter_=None):
    return client.list_by_location(location=location, filter=filter_)


def labservices_sku_list(client, filter_=None):
    return client.list(filter=filter_)
