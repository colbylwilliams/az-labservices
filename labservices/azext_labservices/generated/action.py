# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


# pylint: disable=protected-access

# pylint: disable=no-self-use


import argparse
from collections import defaultdict

from knack.util import CLIError


class AddDefaultConnectionProfile(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.default_connection_profile = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'web-ssh-access':
                d['web_ssh_access'] = v[0]

            elif kl == 'web-rdp-access':
                d['web_rdp_access'] = v[0]

            elif kl == 'client-ssh-access':
                d['client_ssh_access'] = v[0]

            elif kl == 'client-rdp-access':
                d['client_rdp_access'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter default-connection-profile. All possible keys are: web-ssh-access, web-rdp-access, client-ssh-access, client-rdp-access'.
                               format(k))

        return d


class AddDefaultAutoShutdownProfile(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.default_auto_shutdown_profile = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'shutdown-on-disconnect':
                d['shutdown_on_disconnect'] = v[0]

            elif kl == 'shutdown-when-not-connected':
                d['shutdown_when_not_connected'] = v[0]

            elif kl == 'shutdown-on-idle':
                d['shutdown_on_idle'] = v[0]

            elif kl == 'disconnect-delay':
                d['disconnect_delay'] = v[0]

            elif kl == 'no-connect-delay':
                d['no_connect_delay'] = v[0]

            elif kl == 'idle-delay':
                d['idle_delay'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter default-auto-shutdown-profile. All possible keys are: shutdown-on-disconnect, shutdown-when-not-connected, shutdown-on-idle, disconnect-delay, no-connect-delay, idle-delay'.
                               format(k))

        return d


class AddSupportInfo(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.support_info = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'url':
                d['url'] = v[0]

            elif kl == 'email':
                d['email'] = v[0]

            elif kl == 'phone':
                d['phone'] = v[0]

            elif kl == 'instructions':
                d['instructions'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter support-info. All possible keys are: url, email, phone, instructions'.
                               format(k))

        return d


class AddRosterProfile(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.roster_profile = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'active-directory-group-id':
                d['active_directory_group_id'] = v[0]

            elif kl == 'lti-context-id':
                d['lti_context_id'] = v[0]

            elif kl == 'lms-instance':
                d['lms_instance'] = v[0]

            elif kl == 'lti-client-id':
                d['lti_client_id'] = v[0]

            elif kl == 'lti-roster-endpoint':
                d['lti_roster_endpoint'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter roster-profile. All possible keys are: active-directory-group-id, lti-context-id, lms-instance, lti-client-id, lti-roster-endpoint'.
                               format(k))

        return d


class AddImageReference(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.image_reference = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'offer':
                d['offer'] = v[0]

            elif kl == 'publisher':
                d['publisher'] = v[0]

            elif kl == 'sku':
                d['sku'] = v[0]

            elif kl == 'version':
                d['version'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter image-reference. All possible keys are: id, offer, publisher, sku, version'.
                               format(k))

        return d


class AddSku(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.sku = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'tier':
                d['tier'] = v[0]

            elif kl == 'size':
                d['size'] = v[0]

            elif kl == 'family':
                d['family'] = v[0]

            elif kl == 'capacity':
                d['capacity'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter sku. All possible keys are: name, tier, size, family, capacity'.
                               format(k))

        return d


class AddAdditionalCapabilities(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.additional_capabilities = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'install-gpu-drivers':
                d['install_gpu_drivers'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter additional-capabilities. All possible keys are: install-gpu-drivers'.
                               format(k))

        return d


class AddAdminUser(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.admin_user = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'username':
                d['username'] = v[0]

            elif kl == 'password':
                d['password'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter admin-user. All possible keys are: username, password'.
                               format(k))

        return d


class AddNetworkProfile(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.network_profile = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'subnet-id':
                d['subnet_id'] = v[0]

            elif kl == 'load-balancer-id':
                d['load_balancer_id'] = v[0]

            elif kl == 'public-ip-id':
                d['public_ip_id'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter network-profile. All possible keys are: subnet-id, load-balancer-id, public-ip-id'.
                               format(k))

        return d


class AddRecurrencePattern(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.recurrence_pattern = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'frequency':
                d['frequency'] = v[0]

            elif kl == 'week-days':
                d['week_days'] = v

            elif kl == 'interval':
                d['interval'] = v[0]

            elif kl == 'expiration-date':
                d['expiration_date'] = v[0]

            else:
                raise CLIError('Unsupported Key {} is provided for parameter recurrence-pattern. All possible keys are: frequency, week-days, interval, expiration-date'.
                               format(k))

        return d
